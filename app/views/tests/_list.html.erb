<style>
  div.tooltip-inner {
    max-width: 1750px;
  }
</style>

<div class="box box-primary">
  <div class="box-body">
    <div id="batch-buttons" style="display: none">
      <label>Set selected as:</label>
      <button>Pass</button>
      <button>Error</button>
      <button>Fail</button>
    </div>

    <!-- Table will be invisible until datatables is initialized and finishes drawing !-->
    <table id="testsDataTable" class="table table-hover" style="display: none">
      <thead>
      <tr>
        <th></th>
        <th>Name</th>
        <th>Start time</th>
        <th>Duration</th>
        <th class="column-result">Result</th>
      </tr>
      </thead>
      <tbody>

      <%
        result_options = Result.where(manual: true).pluck(:id,:name)
        @tests.each do |test| %>
          <tr data-test-id="<%= test.id %>">
            <td class="details-control fa fa-fw fa-chevron-circle-up"  data-toggle="tooltip" data-placement="right" title="<%= test.name %>"></td>
            <td class="col-xs-8"><%= link_to test.display_name, suite_run_test_path(@run.suite_id, @run.id, test.id) %></td>
            <td class="col-xs-2"><%= test.start_time ? test.start_time.to_s(:db) : 0 %></td>
            <td><%= test.display_duration %></td>
            <td class="col-xs-2">
              <div class="btn-group" role="group" style="width: 70%">
                <%# style of this button is also modified in jQuery responsible for sending manually changed result to API %>
                <button type="button" class="btn-result btn btn-xs btn-block dropdown-toggle <%= test.result.display_style_btn %>"
                        data-toggle="dropdown"
                        data-test-id="<%= test.id %>"
                        data-result-id="<%= test.result_id %>">
                  <%= test.result.name %> <span class="caret"></span>
                </button>
                <ul class="dropdown-menu result-dropdown-menu" >

                  <% result_options.each do |result_option| %>
                      <li><a data-result-id="<%= result_option[0] %>"><%= result_option[1] %></a></li>
                  <% end %>
                </ul>
              </div>
            </td>
          </tr>
      <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
  $(document).ready(function ()
  {
    // When DataTable is redrawn some fancier elements, like status buttons, require some additional setup
    // to retain their functionality
    $('#testsDataTable').on( 'draw.dt', function ()
    {
      // Clear selection whenever user redraws the table (filtering, searching, pagination)
      $.each($('table tr[class~="selected"]'), function(index, value)
      {
        $(value).toggleClass('selected');
      });

      $(".result-dropdown-menu li a").off('click.testsdt');
      $(".result-dropdown-menu li a").on('click.testsdt', function ()
      {
        // each element represents a pair: test_id, result_id
        var testIDs = [];
        var newResultID = $(this).data('result-id');

        if (table.rows('.selected').data().length > 0)
        {
          table.rows('.selected').every( function ( rowIdx, tableLoop, rowLoop ) {
            var buttonGroup = this.data()['val'];
            var button = $(buttonGroup).find('button');
            testIDs.push(button.data('test-id'));
          } );
        }
        else
        {
          var button = $(this).parents('.dropdown-menu').siblings('button');
          testIDs.push(button.data('test-id'));
        }

        $.each(testIDs, function(index, value)
        {
          changeTestResult(value, newResultID);
        });
      });

      $(this).show();
    } );

    // Initialize datatable
    var table = $('#testsDataTable').DataTable(
    {
      paging: <%= @tests.length > 25 %>,
      pageLength: 25,
      info: false,
      lengthMenu: [10, 25, 50, 100],
      columnDefs: [
        { targets: ['column-result'], data: function(row, type, set, meta){
          if (type === 'set')
          {
            row.val = set;
            row.val_display = set;
            row.val_filter = $(set).find('.btn-result').text();
          }
          else if (type === 'display')
          {
            return row.val_display
          }
          else if (type === 'filter')
          {
            return row.val_filter
          }

          return row.val;
        }}
      ],
      order: [[1, 'asc']]
    }
    );

    // Clicking on rows toggles selection (expanding child rows)
    $('#testsDataTable tbody').on( 'click', 'tr', function () {
      var target = $(event.target);
      var tr = $(this).closest('tr');
      var tb = $(this).closest('table');

      // Bootstrap doesn't recognize child rows in DataTables out of the box thus it's required
      // to manually mark them, for example with 'row-child' class to be able to assign custom styles (no hover) and
      // recognize them in event flow (disable selection of child rows by clicking on them)
      if (target.is('td') && !target.hasClass( 'details-control' ) && !tr.hasClass('row-child') && !tb.hasClass('row-child-table'))
      {
        tr.toggleClass('selected');
      }
    });

    // Add event listener for opening and closing details
    $('#testsDataTable tbody').on('click', 'td.details-control', function () {
      var tr = $(this).closest('tr');
      var row = table.row( tr );

      if ( row.child.isShown() )
      {
        // This row is already open - close it
        row.child.hide();
        tr.removeClass('shown');

        // Change icon which represents expansion of the row
        $(this).removeClass('fa fa-fw fa-chevron-circle-down');
        $(this).addClass('fa fa-fw fa-chevron-circle-up');
      }
      else {
        // Open this row
        showTestDescription(tr);

        // Change icon which represents expansion of the row
        $(this).removeClass('fa fa-fw fa-chevron-circle-up');
        $(this).addClass('fa fa-fw fa-chevron-circle-down');
      }
    });

    // Show additional row, with details of a specified test
    function showTestDescription(tr)
    {
      var row = table.row(tr);

      $.ajax
      (
          {
            type: "GET",
            url: "/api/suites/<%= params[:suite_id] %>/runs/<%= params[:id] %>/tests/" + tr.data('test-id'),
            contentType: "application/json",
            dataType: "json"
          }).done(function (response)
      {
        var description = response.description != null ? response.description.split('\n').join("<br>") : null;
        var ticket_content = '';

        if (response.ticket_urls != null)
        {
          var urls = response.ticket_urls.split(',');
          urls.forEach(function(url) {
            ticket_content += '<a href="'+url+'">'+url+'</a><br>'
          });
        }
        else
        {
          ticket_content = null;
        }

        var content = '<table class="row-child-table">';

        if (description != null)
        {
          content +=  '<tr><td valign="top"><strong>Description:</strong></td></tr>'+
                      '<tr><td style="padding-bottom: 15px">'+description+'</td></tr>';
        }

        if (ticket_content != null)
        {
          content +=  '<tr><td valign="top"><strong>Ticket URLs:</strong></td></tr>'+
                      '<tr><td style="padding-bottom: 15px">'+ticket_content+'</td></tr>';
        }

        content += '</table>';
        row.child(content).show();
        row.child().addClass('row-child')
        tr.addClass('shown');
        return response;
      });
    }

    // Changes result_id for specified test
    function changeTestResult(test_id, result_id)
    {
      // Send changed Result
      $.ajax
      (
          {
            type: "PUT",
            //url: "/api/suites/<%= params[:suite_id] %>/runs/<%= params[:id] %>/tests/" + button.data('test-id'),
            url: "/api/suites/<%= params[:suite_id] %>/runs/<%= params[:id] %>/tests/" + test_id,
            contentType: "application/json",
            dataType: "json",
            //data: JSON.stringify({result_id: $(this).data('result-id')})
            data: JSON.stringify({result_id: result_id})
          }).done(function (response)
      {
        // List all possible results and their matching styles, so button can be re-styled once result is set
        var result_styles = []
        <% Result.all.each do |result| %>
        result_styles.push([<%= result.id %>,"<%= result.name %>","<%= result.display_style_btn %>"]);
        <% end %>

        var button = $('.btn-result[data-test-id="'+ test_id +'"]');

        // Update data on button which represents current result
        button.data('result-id', response.result_id);

        // Re-style button to show display new result
        button.removeClass();
        button.addClass("btn-result btn btn-xs btn-block dropdown-toggle ");

        $.each(result_styles, function(index)
        {
          if ($(this)[0] == response.result_id)
          {
            button.html($(this)[1] + ' <span class="caret"/>');
            button.addClass($(this)[2]);
            return false; // needs to return false in order to "break" from jQuery "each"...
          }
        });
      });
    }
  });
</script>

